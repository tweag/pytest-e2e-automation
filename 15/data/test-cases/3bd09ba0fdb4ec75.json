{"uid":"3bd09ba0fdb4ec75","name":"Test GET Call","fullName":"api/api_tests.feature:Test GET Call","historyId":"13a5787acbbef940fecf78f0069b38c8","time":{"start":1750161346432,"stop":1750161346433,"duration":1},"status":"failed","statusMessage":"_pytest.fixtures.FixtureLookupError: ('selenium', <FixtureRequest for <Function test_test_get_call>>)","statusTrace":"file /home/runner/.qa-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py, line 184\n          @pytest.mark.usefixtures(*func_args)\n          def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\nE       recursive dependency involving fixture 'selenium' detected\n>       available fixtures: _pytest_bdd_example, _session_faker, _skip_sensitive, _verify_url, base_url, cache, capabilities, capfd, capfdbinary, caplog, capsys, capsysbinary, check, chrome_options, configure_driver_executor, dataset, dataset_case_data, dataset_class, dataset_copy, dataset_handler, dataset_module, doctest_namespace, driver, driver_args, driver_class, driver_kwargs, driver_log, driver_options_factory, driver_path, edge_options, env_variables, extra, faker, firefox_options, include_metadata_in_junit_xml, json_environment, json_report_path, language, locators, metadata, monkeypatch, project_dir, proxy_url, pytestbdd_given_(With soft assertion '(?P<soft_assert>.*)' )?The (button|element) '(?P<locator_path>.*)' text is '(?P<value>.*)', pytestbdd_given_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is enabled, pytestbdd_given_Browser is maximized, pytestbdd_given_I (double click|doubleclick) on '(?P<locator_path>.*)', pytestbdd_given_I add text '(?P<value>.*)' to field '(?P<locator_path>.*)', pytestbdd_given_I am on the (url|page|site) '(?P<page_url>.*)', pytestbdd_given_I clear text from field '(?P<locator_path>.*)', pytestbdd_given_I click on (checkbox|button|dropdown|item|element) '(?P<locator_path>.*)', pytestbdd_given_I deselect the option '(?P<option>.*)' by value for element '(?P<locator_path>.*)', pytestbdd_given_I deselect the option '(?P<option>.*)' by visible text for element '(?P<locator_path>.*)', pytestbdd_given_I deselect the option at index '(?P<index>.*)' element '(?P<locator_path>.*)', pytestbdd_given_I get text from '(?P<cell>.*)' cell of csv file '(?P<file_path>.*)' and save it as env variable with name '(?P<env_var>.*)', pytestbdd_given_I get text from '(?P<cell>.*)' on '(?P<sheet_name>.*)' of excel file '(?P<file_path>.*)' and save it as environment variable with name '(?P<env_var>.*)', pytestbdd_given_I get text from element '(?P<locator_path>.*)' and save as environment variable '(?P<env_var>.*)', pytestbdd_given_I get text from element '(?P<locator_path>.*)' between '(?P<initial_string>.*)' and '(?P<final_string>.*)' boundaries, and save as environment variable '(?P<env_var>.*)', pytestbdd_given_I get text of '(?P<sheet_name>.*)' of excel file '(?P<file_path>.*)' and save it as environment variables, pytestbdd_given_I hover over '(?P<locator_path1>.*)' and click element '(?P<locator_path2>.*)', pytestbdd_given_I hover over '(?P<locator_path>.*)', pytestbdd_given_I move to an element '(?P<locator_path>.*)' with offset '(?P<x>.*)' '(?P<y>.*)', pytestbdd_given_I move to element '(?P<locator_path>.*)', pytestbdd_given_I pause for '(?P<seconds>.*)' s, pytestbdd_given_I scroll to element '(?P<locator>.*)' for '(?P<iterations>.*)' iterations, pytestbdd_given_I scroll to element '(?P<locator_path>.*)', pytestbdd_given_I scroll to view and click on '(?P<locator_path>.*)', pytestbdd_given_I select the option '(?P<option>.*)' by value for element '(?P<locator_path>.*)', pytestbdd_given_I select the option '(?P<option>.*)' by visible text for element '(?P<locator_path>.*)', pytestbdd_given_I select the option at index '(?P<index>.*)' element '(?P<locator_path>.*)', pytestbdd_given_I select the value '(?P<value>.*)' from dropdown '(?P<locator_path>.*)', pytestbdd_given_I select the value at index '(?P<index>.*)' from dropdown '(?P<locator_path>.*)', pytestbdd_given_I set api base url '(?P<api_base_url>.*)', pytestbdd_given_I set text '(?P<value>.*)' to field '(?P<locator_path>.*)', pytestbdd_given_I set the DELETE endpoint to '(?P<endpoint_url>.*)' for deleting posts, pytestbdd_given_I set the GET endpoint to '(?P<endpoint_url>.*)' for fetching posts, pytestbdd_given_I set the POST endpoint to '(?P<endpoint_url>.*)' for creating posts, pytestbdd_given_I set the UPDATE endpoint to '(?P<endpoint_url>.*)' for updating posts, pytestbdd_given_I set the header param request content type as '(?P<header_content_type>.*)', pytestbdd_given_I set web base url '(?P<base_url>.*)', pytestbdd_given_I store '(?P<key>.*)' environment variable in .local.env config file, pytestbdd_given_I swipe '(?P<direction>left|right)' on element '(?P<locator_path>.*)'( by '(?P<pixels>\\d+)' px)?$, pytestbdd_given_I swipe '(?P<direction>left|right)' on the page( from x = '(?P<x>\\d+)' px and y = '(?P<y>\\d+)' px)?( by '(?P<pixels>\\d+)' px)?$, pytestbdd_given_I swipe down '(?P<percent>.*)' % each time for '(?P<number>.*)' times, pytestbdd_given_I tap on '(?P<locator_path>.*)', pytestbdd_given_I write within the HTML report the environment variable '(?P<env_var>.*)' value, pytestbdd_given_trace, pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I expect that drop-down list '(?P<locator_path>.*)' contains the values:(?P<table_values>.*), pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I expect that drop-down list '(?P<locator_path>.*)' does not contains the values:(?P<table_values>.*), pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I expect that drop-down list '(?P<locator_path>.*)' has in that specific order, only the values:(?P<table_values>.*), pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I verify images '(?P<name>.*)' have no visual regression, pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I verify that element '(?P<locator_path>.*)' is not visually regressed:(?P<data_table>.*), pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I verify the page is not visually regressed:(?P<data_table>.*), pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?The (button|element) '(?P<locator_path>.*)' text is '(?P<value>.*)', pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is clickable, pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is displayed, pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is enabled, pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?There is no element '(?P<locator_path>.*)' on the page, pytestbdd_then_I expect that the title contains '(?P<title>.*)', pytestbdd_then_I expect the HTTP response code of '(?P<request_type>.*)' to be '(?P<status_code>.*)', pytestbdd_then_I expect the response body of '(?P<request_type>.*)' to be empty, pytestbdd_then_I expect the response body of '(?P<request_type>.*)' to be non-empty, pytestbdd_then_I get link from email '(?P<user_type>.*)', pytestbdd_then_I hide the keyboard on mobile app, pytestbdd_then_I put the mobile app in background for '(?P<seconds>.*)' seconds, pytestbdd_then_I reset the mobile app, pytestbdd_then_I write within the HTML report the environment variable '(?P<env_var>.*)' value, pytestbdd_then_The page (path is|url contains) '(?P<url>.*)', pytestbdd_then_The title is '(?P<title>.*)', pytestbdd_then_trace, pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?The (button|element) '(?P<locator_path>.*)' text is '(?P<value>.*)', pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is clickable, pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is displayed, pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is enabled, pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is not displayed, pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?There is no element '(?P<locator_path>.*)' on the page, pytestbdd_when_Browser is maximized, pytestbdd_when_I (double click|doubleclick) on '(?P<locator_path>.*)', pytestbdd_when_I add text '(?P<value>.*)' to field '(?P<locator_path>.*)', pytestbdd_when_I am on the (url|page|site) '(?P<page_url>.*)', pytestbdd_when_I clear text from field '(?P<locator_path>.*)', pytestbdd_when_I click item '(?P<inner_text>.*)' for element '(?P<locator_path>.*)', pytestbdd_when_I click on (checkbox|button|dropdown|item|element) '(?P<locator_path>.*)', pytestbdd_when_I deselect the option '(?P<option>.*)' by value for element '(?P<locator_path>.*)', pytestbdd_when_I deselect the option '(?P<option>.*)' by visible text for element '(?P<locator_path>.*)', pytestbdd_when_I deselect the option at index '(?P<index>.*)' element '(?P<locator_path>.*)', pytestbdd_when_I get link from email '(?P<user_type>.*)', pytestbdd_when_I get text from '(?P<cell>.*)' cell of csv file '(?P<file_path>.*)' and save it as env variable with name '(?P<env_var>.*)', pytestbdd_when_I get text from '(?P<cell>.*)' on '(?P<sheet_name>.*)' of excel file '(?P<file_path>.*)' and save it as environment variable with name '(?P<env_var>.*)', pytestbdd_when_I get text from element '(?P<locator_path>.*)' and save as environment variable '(?P<env_var>.*)', pytestbdd_when_I get text from element '(?P<locator_path>.*)' between '(?P<initial_string>.*)' and '(?P<final_string>.*)' boundaries, and save as environment variable '(?P<env_var>.*)', pytestbdd_when_I get text of '(?P<sheet_name>.*)' of excel file '(?P<file_path>.*)' and save it as environment variables, pytestbdd_when_I hide the keyboard on mobile app, pytestbdd_when_I hover over '(?P<locator_path1>.*)' and click element '(?P<locator_path2>.*)', pytestbdd_when_I hover over '(?P<locator_path>.*)', pytestbdd_when_I move to an element '(?P<locator_path>.*)' with offset '(?P<x>.*)' '(?P<y>.*)', pytestbdd_when_I move to element '(?P<locator_path>.*)', pytestbdd_when_I pause for '(?P<seconds>.*)' s, pytestbdd_when_I put the mobile app in background for '(?P<seconds>.*)' seconds, pytestbdd_when_I reset the mobile app, pytestbdd_when_I scroll to element '(?P<locator>.*)' for '(?P<iterations>.*)' iterations, pytestbdd_when_I scroll to element '(?P<locator_path>.*)', pytestbdd_when_I scroll to view and click on '(?P<locator_path>.*)', pytestbdd_when_I select the option '(?P<option>.*)' by value for element '(?P<locator_path>.*)', pytestbdd_when_I select the option '(?P<option>.*)' by visible text for element '(?P<locator_path>.*)', pytestbdd_when_I select the option at index '(?P<index>.*)' element '(?P<locator_path>.*)', pytestbdd_when_I select the value '(?P<value>.*)' from dropdown '(?P<locator_path>.*)', pytestbdd_when_I select the value at index '(?P<index>.*)' from dropdown '(?P<locator_path>.*)', pytestbdd_when_I send a DELETE HTTP request, pytestbdd_when_I send a GET HTTP request, pytestbdd_when_I send a POST HTTP request with '(?P<payload>.*)', pytestbdd_when_I send a PUT HTTP request with '(?P<payload>.*)', pytestbdd_when_I set text '(?P<value>.*)' to field '(?P<locator_path>.*)', pytestbdd_when_I set value '(?P<value>.*)' for item '(?P<inner_text>.*)' on element '(?P<locator_path>.*)', pytestbdd_when_I store '(?P<key>.*)' environment variable in .local.env config file, pytestbdd_when_I swipe '(?P<direction>left|right)' on element '(?P<locator_path>.*)'( by '(?P<pixels>\\d+)' px)?$, pytestbdd_when_I swipe '(?P<direction>left|right)' on the page( from x = '(?P<x>\\d+)' px and y = '(?P<y>\\d+)' px)?( by '(?P<pixels>\\d+)' px)?$, pytestbdd_when_I swipe down '(?P<percent>.*)' % each time for '(?P<number>.*)' times, pytestbdd_when_I switch to iframe '(?P<locator_path>.*)', pytestbdd_when_I write within the HTML report the environment variable '(?P<env_var>.*)' value, pytestbdd_when_My screen resolution is '(?P<width>.*)' by '(?P<height>.*)' pixels, pytestbdd_when_The browser resolution is '(?P<width>.*)' per '(?P<height>.*)', pytestbdd_when_trace, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, selenium, selenium_generics, selenium_patcher, sensitive_url, session_capabilities, set_delete_endpoint, set_headers, set_post_endpoint, set_rest_api_base_url, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, variables, worker_id\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/.qa-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:184","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"_pytest.fixtures.FixtureLookupError: ('selenium', <FixtureRequest for <Function test_test_get_call>>)","statusTrace":"file /home/runner/.qa-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py, line 184\n          @pytest.mark.usefixtures(*func_args)\n          def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\nE       recursive dependency involving fixture 'selenium' detected\n>       available fixtures: _pytest_bdd_example, _session_faker, _skip_sensitive, _verify_url, base_url, cache, capabilities, capfd, capfdbinary, caplog, capsys, capsysbinary, check, chrome_options, configure_driver_executor, dataset, dataset_case_data, dataset_class, dataset_copy, dataset_handler, dataset_module, doctest_namespace, driver, driver_args, driver_class, driver_kwargs, driver_log, driver_options_factory, driver_path, edge_options, env_variables, extra, faker, firefox_options, include_metadata_in_junit_xml, json_environment, json_report_path, language, locators, metadata, monkeypatch, project_dir, proxy_url, pytestbdd_given_(With soft assertion '(?P<soft_assert>.*)' )?The (button|element) '(?P<locator_path>.*)' text is '(?P<value>.*)', pytestbdd_given_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is enabled, pytestbdd_given_Browser is maximized, pytestbdd_given_I (double click|doubleclick) on '(?P<locator_path>.*)', pytestbdd_given_I add text '(?P<value>.*)' to field '(?P<locator_path>.*)', pytestbdd_given_I am on the (url|page|site) '(?P<page_url>.*)', pytestbdd_given_I clear text from field '(?P<locator_path>.*)', pytestbdd_given_I click on (checkbox|button|dropdown|item|element) '(?P<locator_path>.*)', pytestbdd_given_I deselect the option '(?P<option>.*)' by value for element '(?P<locator_path>.*)', pytestbdd_given_I deselect the option '(?P<option>.*)' by visible text for element '(?P<locator_path>.*)', pytestbdd_given_I deselect the option at index '(?P<index>.*)' element '(?P<locator_path>.*)', pytestbdd_given_I get text from '(?P<cell>.*)' cell of csv file '(?P<file_path>.*)' and save it as env variable with name '(?P<env_var>.*)', pytestbdd_given_I get text from '(?P<cell>.*)' on '(?P<sheet_name>.*)' of excel file '(?P<file_path>.*)' and save it as environment variable with name '(?P<env_var>.*)', pytestbdd_given_I get text from element '(?P<locator_path>.*)' and save as environment variable '(?P<env_var>.*)', pytestbdd_given_I get text from element '(?P<locator_path>.*)' between '(?P<initial_string>.*)' and '(?P<final_string>.*)' boundaries, and save as environment variable '(?P<env_var>.*)', pytestbdd_given_I get text of '(?P<sheet_name>.*)' of excel file '(?P<file_path>.*)' and save it as environment variables, pytestbdd_given_I hover over '(?P<locator_path1>.*)' and click element '(?P<locator_path2>.*)', pytestbdd_given_I hover over '(?P<locator_path>.*)', pytestbdd_given_I move to an element '(?P<locator_path>.*)' with offset '(?P<x>.*)' '(?P<y>.*)', pytestbdd_given_I move to element '(?P<locator_path>.*)', pytestbdd_given_I pause for '(?P<seconds>.*)' s, pytestbdd_given_I scroll to element '(?P<locator>.*)' for '(?P<iterations>.*)' iterations, pytestbdd_given_I scroll to element '(?P<locator_path>.*)', pytestbdd_given_I scroll to view and click on '(?P<locator_path>.*)', pytestbdd_given_I select the option '(?P<option>.*)' by value for element '(?P<locator_path>.*)', pytestbdd_given_I select the option '(?P<option>.*)' by visible text for element '(?P<locator_path>.*)', pytestbdd_given_I select the option at index '(?P<index>.*)' element '(?P<locator_path>.*)', pytestbdd_given_I select the value '(?P<value>.*)' from dropdown '(?P<locator_path>.*)', pytestbdd_given_I select the value at index '(?P<index>.*)' from dropdown '(?P<locator_path>.*)', pytestbdd_given_I set api base url '(?P<api_base_url>.*)', pytestbdd_given_I set text '(?P<value>.*)' to field '(?P<locator_path>.*)', pytestbdd_given_I set the DELETE endpoint to '(?P<endpoint_url>.*)' for deleting posts, pytestbdd_given_I set the GET endpoint to '(?P<endpoint_url>.*)' for fetching posts, pytestbdd_given_I set the POST endpoint to '(?P<endpoint_url>.*)' for creating posts, pytestbdd_given_I set the UPDATE endpoint to '(?P<endpoint_url>.*)' for updating posts, pytestbdd_given_I set the header param request content type as '(?P<header_content_type>.*)', pytestbdd_given_I set web base url '(?P<base_url>.*)', pytestbdd_given_I store '(?P<key>.*)' environment variable in .local.env config file, pytestbdd_given_I swipe '(?P<direction>left|right)' on element '(?P<locator_path>.*)'( by '(?P<pixels>\\d+)' px)?$, pytestbdd_given_I swipe '(?P<direction>left|right)' on the page( from x = '(?P<x>\\d+)' px and y = '(?P<y>\\d+)' px)?( by '(?P<pixels>\\d+)' px)?$, pytestbdd_given_I swipe down '(?P<percent>.*)' % each time for '(?P<number>.*)' times, pytestbdd_given_I tap on '(?P<locator_path>.*)', pytestbdd_given_I write within the HTML report the environment variable '(?P<env_var>.*)' value, pytestbdd_given_trace, pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I expect that drop-down list '(?P<locator_path>.*)' contains the values:(?P<table_values>.*), pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I expect that drop-down list '(?P<locator_path>.*)' does not contains the values:(?P<table_values>.*), pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I expect that drop-down list '(?P<locator_path>.*)' has in that specific order, only the values:(?P<table_values>.*), pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I verify images '(?P<name>.*)' have no visual regression, pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I verify that element '(?P<locator_path>.*)' is not visually regressed:(?P<data_table>.*), pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?I verify the page is not visually regressed:(?P<data_table>.*), pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?The (button|element) '(?P<locator_path>.*)' text is '(?P<value>.*)', pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is clickable, pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is displayed, pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is enabled, pytestbdd_then_(With soft assertion '(?P<soft_assert>.*)' )?There is no element '(?P<locator_path>.*)' on the page, pytestbdd_then_I expect that the title contains '(?P<title>.*)', pytestbdd_then_I expect the HTTP response code of '(?P<request_type>.*)' to be '(?P<status_code>.*)', pytestbdd_then_I expect the response body of '(?P<request_type>.*)' to be empty, pytestbdd_then_I expect the response body of '(?P<request_type>.*)' to be non-empty, pytestbdd_then_I get link from email '(?P<user_type>.*)', pytestbdd_then_I hide the keyboard on mobile app, pytestbdd_then_I put the mobile app in background for '(?P<seconds>.*)' seconds, pytestbdd_then_I reset the mobile app, pytestbdd_then_I write within the HTML report the environment variable '(?P<env_var>.*)' value, pytestbdd_then_The page (path is|url contains) '(?P<url>.*)', pytestbdd_then_The title is '(?P<title>.*)', pytestbdd_then_trace, pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?The (button|element) '(?P<locator_path>.*)' text is '(?P<value>.*)', pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is clickable, pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is displayed, pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is enabled, pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?The element '(?P<locator_path>.*)' is not displayed, pytestbdd_when_(With soft assertion '(?P<soft_assert>.*)' )?There is no element '(?P<locator_path>.*)' on the page, pytestbdd_when_Browser is maximized, pytestbdd_when_I (double click|doubleclick) on '(?P<locator_path>.*)', pytestbdd_when_I add text '(?P<value>.*)' to field '(?P<locator_path>.*)', pytestbdd_when_I am on the (url|page|site) '(?P<page_url>.*)', pytestbdd_when_I clear text from field '(?P<locator_path>.*)', pytestbdd_when_I click item '(?P<inner_text>.*)' for element '(?P<locator_path>.*)', pytestbdd_when_I click on (checkbox|button|dropdown|item|element) '(?P<locator_path>.*)', pytestbdd_when_I deselect the option '(?P<option>.*)' by value for element '(?P<locator_path>.*)', pytestbdd_when_I deselect the option '(?P<option>.*)' by visible text for element '(?P<locator_path>.*)', pytestbdd_when_I deselect the option at index '(?P<index>.*)' element '(?P<locator_path>.*)', pytestbdd_when_I get link from email '(?P<user_type>.*)', pytestbdd_when_I get text from '(?P<cell>.*)' cell of csv file '(?P<file_path>.*)' and save it as env variable with name '(?P<env_var>.*)', pytestbdd_when_I get text from '(?P<cell>.*)' on '(?P<sheet_name>.*)' of excel file '(?P<file_path>.*)' and save it as environment variable with name '(?P<env_var>.*)', pytestbdd_when_I get text from element '(?P<locator_path>.*)' and save as environment variable '(?P<env_var>.*)', pytestbdd_when_I get text from element '(?P<locator_path>.*)' between '(?P<initial_string>.*)' and '(?P<final_string>.*)' boundaries, and save as environment variable '(?P<env_var>.*)', pytestbdd_when_I get text of '(?P<sheet_name>.*)' of excel file '(?P<file_path>.*)' and save it as environment variables, pytestbdd_when_I hide the keyboard on mobile app, pytestbdd_when_I hover over '(?P<locator_path1>.*)' and click element '(?P<locator_path2>.*)', pytestbdd_when_I hover over '(?P<locator_path>.*)', pytestbdd_when_I move to an element '(?P<locator_path>.*)' with offset '(?P<x>.*)' '(?P<y>.*)', pytestbdd_when_I move to element '(?P<locator_path>.*)', pytestbdd_when_I pause for '(?P<seconds>.*)' s, pytestbdd_when_I put the mobile app in background for '(?P<seconds>.*)' seconds, pytestbdd_when_I reset the mobile app, pytestbdd_when_I scroll to element '(?P<locator>.*)' for '(?P<iterations>.*)' iterations, pytestbdd_when_I scroll to element '(?P<locator_path>.*)', pytestbdd_when_I scroll to view and click on '(?P<locator_path>.*)', pytestbdd_when_I select the option '(?P<option>.*)' by value for element '(?P<locator_path>.*)', pytestbdd_when_I select the option '(?P<option>.*)' by visible text for element '(?P<locator_path>.*)', pytestbdd_when_I select the option at index '(?P<index>.*)' element '(?P<locator_path>.*)', pytestbdd_when_I select the value '(?P<value>.*)' from dropdown '(?P<locator_path>.*)', pytestbdd_when_I select the value at index '(?P<index>.*)' from dropdown '(?P<locator_path>.*)', pytestbdd_when_I send a DELETE HTTP request, pytestbdd_when_I send a GET HTTP request, pytestbdd_when_I send a POST HTTP request with '(?P<payload>.*)', pytestbdd_when_I send a PUT HTTP request with '(?P<payload>.*)', pytestbdd_when_I set text '(?P<value>.*)' to field '(?P<locator_path>.*)', pytestbdd_when_I set value '(?P<value>.*)' for item '(?P<inner_text>.*)' on element '(?P<locator_path>.*)', pytestbdd_when_I store '(?P<key>.*)' environment variable in .local.env config file, pytestbdd_when_I swipe '(?P<direction>left|right)' on element '(?P<locator_path>.*)'( by '(?P<pixels>\\d+)' px)?$, pytestbdd_when_I swipe '(?P<direction>left|right)' on the page( from x = '(?P<x>\\d+)' px and y = '(?P<y>\\d+)' px)?( by '(?P<pixels>\\d+)' px)?$, pytestbdd_when_I swipe down '(?P<percent>.*)' % each time for '(?P<number>.*)' times, pytestbdd_when_I switch to iframe '(?P<locator_path>.*)', pytestbdd_when_I write within the HTML report the environment variable '(?P<env_var>.*)' value, pytestbdd_when_My screen resolution is '(?P<width>.*)' by '(?P<height>.*)' pixels, pytestbdd_when_The browser resolution is '(?P<width>.*)' per '(?P<height>.*)', pytestbdd_when_trace, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, selenium, selenium_generics, selenium_patcher, sensitive_url, session_capabilities, set_delete_endpoint, set_headers, set_post_endpoint, set_rest_api_base_url, testrun_uid, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, variables, worker_id\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/runner/.qa-venv/lib/python3.9/site-packages/pytest_bdd/scenario.py:184","steps":[{"name":"Given I set api base url '{%API_BASE_URL%}'","time":{"start":1750161346432,"stop":1750161346442,"duration":10},"status":"skipped","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"host","value":"pkrvmxyh4eaekms"},{"name":"thread","value":"3691-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test HTTP methods for a REST API"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b1c2f3114d12515e","status":"failed","statusDetails":"_pytest.fixtures.FixtureLookupError: ('selenium', <FixtureRequest for <Function test_test_get_call>>)","time":{"start":1750161343941,"stop":1750161343946,"duration":5}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"3bd09ba0fdb4ec75.json","parameterValues":[]}